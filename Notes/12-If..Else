## If...Else, switch

#### Java Conditions and If Statements

Java supports the usual logical conditions from mathematics:

- Less than: a < b
- Less than or equal to: a <= b
- Greater than: a > b
- Greater than or equal to: a >= b
- Equal to a == b
- Not Equal to: a != b

You can use these conditions to perform different actions for different decisions.

Java has the following __conditional statements__:

- Use `if` to specify a block of code to be executed, if a specified condition is true
- Use `else` to specify a block of code to be executed, if the same condition is false
- Use `else if` to specify a new condition to test, if the first condition is false
- Use `switch` to specify many alternative blocks of code to be executed

Note: `if` is in lowercase letters. Uppercase letters (If or IF) will generate an error.

**Syntax**

```java
if (condition1) {
  // block of code to be executed if condition1 is true
} else if (condition2) {
  // block of code to be executed if the condition1 is false and condition2 is true
} else {
  // block of code to be executed if the condition1 is false and condition2 is false
} 
```

```java
int time = 22;

if (time < 10) {
  System.out.println("Good morning.");

} else if (time < 20) {
  System.out.println("Good day.");

} else {
  System.out.println("Good evening.");
}
// Outputs "Good evening."
```

**Short Hand**

If you have only one statement to execute, one for `if`, and one for `else`, you can put it all on the same line:

```java
variable = (condition) ? expressionTrue : expressionFalse;
```

```java
int time = 20;
String result = (time < 18) ? "Good day." : "Good evening.";
System.out.println(result);
```

#### Java Switch Statements

Use the `switch` statement to select one of many code blocks to be executed.

__Syntax__

```java
switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}
```

- The `switch` expression is evaluated once.
- The value of the expression is compared with the values of each `case`.
- If there is a match, the associated block of code is executed.
- The `break` keywords are optional. When Java reaches a `break` keyword, it breaks out of the switch block. This will stop the execution of more code and case testing inside the block.

The example below uses the weekday number to calculate the weekday name:

```java
int day = 4;
switch (day) {
  case 1:
    System.out.println("Monday");
    break;
  case 2:
    System.out.println("Tuesday");
    break;
  case 3:
    System.out.println("Wednesday");
    break;
  case 4:
    System.out.println("Thursday");
    break;
  case 5:
    System.out.println("Friday");
    break;
  case 6:
    System.out.println("Saturday");
    break;
  case 7:
    System.out.println("Sunday");
    break;
}
// Outputs "Thursday" (day 4)
```

